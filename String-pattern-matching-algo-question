Unraveling Clues with Professor
Professor Prateek from HeyCoach coding academy in Bangalore challenges Varshil to find all indices where a given pattern appears within a given text. Both text and pattern consist of lowercase alphabetical characters. The goal is to identify the starting indices in the text where the complete pattern is found.

Input Format:

The first line contains the string text, consisting of lowercase alphabetical characters (1 <= |text| <= 10^5).
The second line contains the string pattern, consisting of lowercase alphabetical characters (1 <= |pattern| <= 10^5).
Output Format:

A list of integers separated by spaces, representing the starting indices of the text where the pattern appears in its entirety.
Sample Input 1:

text = "ababcabab"
pattern = "ab"
Sample Output 1:

0 2 5 7
Explanation:

The pattern "ab" appears at indices 0, 2, 5, and 7 within the text.

Constraints:

(1 <= |text| <= 10^5)
(1 <= |pattern| <= 10^5)
The text and pattern consist only of lowercase alphabetical characters.
Note:The function should return the result. The driver code will handle printing the output.

Solution:

class Solution {
  public List<Integer> findPatternIndices(String text, String pattern) {
     //Write your code here
       List<Integer> ans = new ArrayList<>();
       int n = text.length();
       int m = pattern.length();
       int[] lps = new int[m];
       computeLPS(pattern,m,lps);
       int i=0;
       int j=0;
       while(i<n){
          if(pattern.charAt(j) == text.charAt(i)){
             i++;
             j++;
          }

         if(j == m){
            ans.add(i-j);
            j = lps[j - 1]; 
         }
         else if(i < n && pattern.charAt(j) != text.charAt(i)){
               if(j!=0){
                 j = lps[j-1];
               }else{
                 i = i+1;
               }
         }
       }
    return ans;
   }

  void computeLPS(String pattern,int m,int[] lps){
    lps[0] = 0;
    int i=1;
    int len = 0;

    while(i<m){
         if(pattern.charAt(i) == pattern.charAt(len)){
            len++;
            lps[i] = len;
            i++;
         }else{
            if(len!=0){
              len = lps[len -1];
            }else{
              lps[i] = 0;
              i++;
            }
       }
    }
  }
}
