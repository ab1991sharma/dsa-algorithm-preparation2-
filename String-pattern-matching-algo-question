Unraveling Clues with Professor
Professor Prateek from HeyCoach coding academy in Bangalore challenges Varshil to find all indices where a given pattern appears within a given text. Both text and pattern consist of lowercase alphabetical characters. The goal is to identify the starting indices in the text where the complete pattern is found.

Input Format:

The first line contains the string text, consisting of lowercase alphabetical characters (1 <= |text| <= 10^5).
The second line contains the string pattern, consisting of lowercase alphabetical characters (1 <= |pattern| <= 10^5).
Output Format:

A list of integers separated by spaces, representing the starting indices of the text where the pattern appears in its entirety.
Sample Input 1:

text = "ababcabab"
pattern = "ab"
Sample Output 1:

0 2 5 7
Explanation:

The pattern "ab" appears at indices 0, 2, 5, and 7 within the text.

Constraints:

(1 <= |text| <= 10^5)
(1 <= |pattern| <= 10^5)
The text and pattern consist only of lowercase alphabetical characters.
Note:The function should return the result. The driver code will handle printing the output.

Solution:

class Solution {
  public List<Integer> findPatternIndices(String text, String pattern) {
     //Write your code here
       List<Integer> ans = new ArrayList<>();
       int n = text.length();
       int m = pattern.length();
       int[] lps = new int[m];
       computeLPS(pattern,m,lps);
       int i=0;
       int j=0;
       while(i<n){
          if(pattern.charAt(j) == text.charAt(i)){
             i++;
             j++;
          }

         if(j == m){
            ans.add(i-j);
            j = lps[j - 1]; 
         }
         else if(i < n && pattern.charAt(j) != text.charAt(i)){
               if(j!=0){
                 j = lps[j-1];
               }else{
                 i = i+1;
               }
         }
       }
    return ans;
   }

  void computeLPS(String pattern,int m,int[] lps){
    lps[0] = 0;
    int i=1;
    int len = 0;

    while(i<m){
         if(pattern.charAt(i) == pattern.charAt(len)){
            len++;
            lps[i] = len;
            i++;
         }else{
            if(len!=0){
              len = lps[len -1];
            }else{
              lps[i] = 0;
              i++;
            }
       }
    }
  }
}

/*
kmp algorithm
*/

class KMP_String_Matching { 
    void KMPSearch(String pat, String txt) 
    { 
        int M = pat.length(); 
        int N = txt.length(); 
  
        // create lps[] that will hold the longest 
        // prefix suffix values for pattern 
        int lps[] = new int[M]; 
        int j = 0; // index for pat[] 
  
        // Preprocess the pattern (calculate lps[] 
        // array) 
        computeLPSArray(pat, M, lps); 
        for(int i=0;i<lps.length;i++){
            System.out.print(lps[i]+" ");
        }
  
        int i = 0; // index for txt[] 
        while (i < N) { 
            if (pat.charAt(j) == txt.charAt(i)) { 
                j++; 
                i++; 
            } 
            if (j == M) { 
                System.out.println("Found pattern "
                                   + "at index " + (i - j)); 
                j = lps[j - 1]; 
            } 
  
            // mismatch after j matches 
            else if (i < N && pat.charAt(j) != txt.charAt(i)) { 
                // Do not match lps[0..lps[j-1]] characters, 
                // they will match anyway 
                if (j != 0) 
                    j = lps[j - 1]; 
                else
                    i = i + 1; 
            } 
        } 
    } 
  
    void computeLPSArray(String pat, int M, int lps[]) 
    { 
        // length of the previous longest prefix suffix 
        int len = 0; 
        int i = 1; 
        lps[0] = 0; // lps[0] is always 0 
  
        // the loop calculates lps[i] for i = 1 to M-1 
        while (i < M) { 
            if (pat.charAt(i) == pat.charAt(len)) { 
                len++; 
                lps[i] = len; 
                i++; 
            } 
            else // (pat[i] != pat[len]) 
            { 
                // This is tricky. Consider the example. 
                // AAACAAAA and i = 7. The idea is similar 
                // to search step. 
                if (len != 0) { 
                    len = lps[len - 1]; 
  
                    // Also, note that we do not increment 
                    // i here 
                } 
                else // if (len == 0) 
                { 
                    lps[i] = len; 
                    i++; 
                } 
            } 
        } 
    } 
  
    // Driver program to test above function 
    public static void main(String args[]) 
    { 
        String txt = "ABABDABACDABABCABAB"; 
        String pat = "ABABCABAB"; 
        new KMP_String_Matching().KMPSearch(pat, txt); 
    } 
}
